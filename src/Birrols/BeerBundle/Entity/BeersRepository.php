<?php

namespace Birrols\BeerBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BeersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BeersRepository extends EntityRepository
{
    public function findAllViewByPage( $paginator=NULL, $page=1, $pageLimit=NULL, 
            array $criteria=NULL, array $orderBy = null, $limit = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('b');
//        $query = $qb->select('b, w.name brewery, w.userAdmin, w.country, 
        $query = $qb->select( 'b, w.id brewery_id, w.name brewery, w.country, 
            c.category, t.type')
//                ->from('Beers', 'b')
                ->innerJoin('b.brewery', 'w', 'ON')
                ->leftJoin('b.category', 'c', 'ON')
                ->leftJoin('b.type', 't', 'ON')
                ->where('w.brewery=1');
        if( $limit ) {
            $query = $query->setMaxResults($limit);
        }
        if( $offset ) {
            $query = $query->setFirstResult($offset);
        }
        
        foreach ($criteria as $field => $value) {
            switch( $field ):
                case 'categoryIds':
                    $query = $query->andWhere( $qb->expr()->in('c.id', ':categoryIds') )
                        ->setParameter($field, $value);
                    break;
                case 'typeId':
                    $query->andWhere( $qb->expr()->eq('t.id', ':typeId') )
                        ->setParameter($field, $value);
                    break;
                case 'countryId':
                    $query->andWhere( $qb->expr()->eq('p.id', ':countryId') )
                        ->setParameter($field, $value);
                    break;
                case 'breweryId':
                    $query->andWhere( $qb->expr()->eq('w.id', ':breweryId') )
                        ->setParameter($field, $value);
                    break;
                case 'brewery':
                    $search_array = preg_split( '/ /', $value );
                    $orBrewery = new $qb->expr();
                    $i = 0;
                    foreach( $search_array as $search_term ) {
                        $orBrewery = $orBrewery->orX( 
                                $qb->expr()->like( 'w.name', ':brewery' . $i )
                        );
                        $query->setParameter('brewery' . $i, $search_term);
                        $i++;
                    }
                    $query->andWhere( $orBrewery );
                    break;
                case 'abvMin':
                    $query->andWhere( $qb->expr()->gte('b.abv', ':abvMin') )
                        ->setParameter($field, $value);
                    break;
                case 'abvMax':
                    $query->andWhere( $qb->expr()->lte('b.abv', ':abvMax') )
                        ->setParameter($field, $value);
                    break;
                case 'ibuMin':
                    $query->andWhere( $qb->expr()->gte('b.ibu', ':ibuMin') )
                        ->setParameter($field, $value);
                    break;
                case '':
                    $query->andWhere( $qb->expr()->lte('b.ibu', ':ibuMax') )
                        ->setParameter($field, $value);
                    break;
                case 'search':
                    $search_array = preg_split( '/ /', $value );
                    $orSearch = new $qb->expr();
                    $i = 0;
                    foreach( $search_array as $search_term ) {
                        $orSearch = $orSearch
                            ->orX( $qb->expr()->like( 'b.name', ':search' . $i ) )
                            ->orX( $qb->expr()->like( 'b.description', ':search' . $i ) );
                        $query->setParameter('search' . $i, $search_term);
                        $i++;
                    }
                    $query->andWhere( $orSearch );
                    break;
                default:
                    break;
            endswitch;
        }
        
        $query = $query->getQuery();

        if( $paginator ) {
            $pagination = $paginator->paginate(
                $query,
                $page, 
                $pageLimit
            );

            return $pagination;
        } else {
            $beers = $query->getResult();
        
            return $beers;
        }
        
    } // end findAllViewByParams
    
}

//        $query = $this->getEntityManager()
//                ->createQuery('
//                    SELECT b.*, w.name brewery, w.user_admin_id, c.category, t.type, p.name country, p.auto_id country_id
//                    FROM beers b 
//                    INNER JOIN business w ON b.brewery_id = w.auto_id
//                    LEFT JOIN beer_categories c ON b.category_id = c.auto_id
//                    LEFT JOIN beer_types t ON  b.type_id = t.auto_id
//                    LEFT JOIN countries p ON w.country_id = p.auto_id
//                    WHERE w.brewery')
//                ->setParameter($key, $value);
//        return $query->getResult();
